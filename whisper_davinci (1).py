# -*- coding: utf-8 -*-
"""WHISPER - DAVINCI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IS0Y3LgqXEK4xQWYNKHER-sjfpDJoU0B

## **LIBRERÍAS**
"""

!pip install openai

!pip install tiktoken
!pip install --upgrade --no-deps --force-reinstall git+https://github.com/openai/whisper.git

# on Ubuntu or Debian
!sudo apt update && sudo apt install ffmpeg

# on Arch Linux
!sudo pacman -S ffmpeg
!brew install ffmpeg
!choco install ffmpeg
!scoop install ffmpeg

!pip install setuptools-rust
!pip install ffmpeg-python
!pip install transformers
!pip install hermetrics

!pip install pydub

import whisper
from hermetrics.metric_comparator import MetricComparator
from hermetrics.osa import Osa
from hermetrics.dice import Dice
import matplotlib.pyplot as plt
import time
import numpy as np
import pandas as pd
import gc
import sys
import os

import openai
import json
from pydub import AudioSegment

"""## **FUNCIONES**"""

def extraer_marca(i):
  cont=0
  #print(i)
  if not("marca" in i):
    i="marca "+i.strip()

  if "marca" in i:
    i=i.replace(" fin ", " ")
    i=i.replace("inicio", "")
    i=i.strip()
    while "marca" in i:
      ind=i.index("marca")
      marca=i[ind+6:]
      i=i[:ind]+"&"+i[ind+1:]
      if not(" " in marca):
        i=i.replace("&arca","mr$"+str(cont))
        cont+1
        break

      if len(marca)<=4:
        marca=i[i.index(marca):i.index(marca)+len(marca)+12]
        if len(marca)-len(marca.replace(" ",""))>=2:
          marca=marca[:marca.rindex(" ")]
        if "inic" in marca:
          marca=marca[:marca.index("inic")]
      else:
        marca=marca[:marca.index(" ")]

        marca=marca.strip()
      i=i.replace("&arca","mr$"+str(cont))
      cont+1
      #print(i)
      #print(marca)
      break
  else:
    marca="Sin marca"
  #print()

  return marca, cont, i

def extraer_precios_ofertas(marca, i, cont):
  grup_prods=[]
  pre_cont_m=str(cont)+"-"
  cont_m=0
  while "normal" in i:
    producto=[marca,""]
    ind=i.index("normal")
    ant_precio=i[ind+7:]
    precio=""
    for k in ant_precio:
      if k in num:
        precio+=k
      else:
        break

    i=i[:ind]+"&"+i[ind+1:]
    producto.append(precio)

    oferta=""
    while "oferta" in i:
      ind_of=i.index("oferta")
      oferta=""
      if ind_of-(7+len(precio))>ind:
        break
      ant_oferta=i[ind_of+7:]
      for k in ant_oferta:
        if k in num:
          oferta+=k
        else:
          break
      i=i[:ind_of]+"&"+i[ind_of+1:]
      i=i.replace("&ferta","of$"+pre_cont_m+str(cont_m))
      break

    producto.append(oferta)
    i=i.replace("&ormal","pr$"+pre_cont_m+str(cont_m))
    cont_m+=1
    grup_prods.append(producto)

  return grup_prods, i

def mejor_coincidencia(pala, list_pala, dicc=False):
  maxi=0.59
  enct=False
  best_coinc=pala
  for i in list_pala:
    result=MetricComparator([Osa()]).similarity(pala, i.lower())["OSA"]
    if result>maxi:
      best_coinc=i
      maxi=result
      enct=True

  return best_coinc, enct

def mejor_coincidencia_descrip(marca, descrip, list_descrip, dicc=False):
  maxi=0.54
  enct=False
  best_coinc=descrip
  for i in list_descrip:
    descrip_f=descrip
    if marca.lower() in i.lower():
      descrip_f=marca.lower()+" "+descrip
    result=MetricComparator([Dice()]).similarity(descrip_f, i.lower())["Dice"]
    if result>maxi:
      best_coinc=i
      maxi=result
      enct=True

  return best_coinc, enct

def gpt(promt, vers="gpt-3.5-turbo"):
  try:
    completion=openai.ChatCompletion.create(model=vers, 
                                            messages=[{"role": "user", "content":promt}],
                                            max_tokens=2048)
  except Exception as err:
    if "maximum context" in str(err):
      return { "text": "", "usage": "exceed tokens"}
    elif "Rate limit" in str(err):
      return { "text": "", "usage": "rate limit"}
  
  return { "text": completion.choices[0].message.content, "usage": completion.usage}

def davinci(promt, vers="text-davinci-003"):
  try:
    completion=openai.Completion.create(engine=vers,
                                        prompt=promt,
                                        max_tokens=2048)
  except Exception as err:
    if "maximum context" in str(err):
      return { "text": "", "usage": "exceed tokens"}
    elif "Rate limit" in str(err):
      return { "text": "", "usage": "rate limit"}
  
  return { "text": completion.choices[0].text, "usage": completion.usage}

def cle_ini_fin(text):
  bas=[" ", ",", "."]

  while True:
    ini=True
    fin=True
    for i in bas:
      if len(text)>0:
        if i==text[0]:
          text=text[1:]
          ini=False
      
      if len(text)>0:
        if i==text[-1]:
          text=text[:-1]
          fin=False

    if ini and fin:
      break

  return text

"""## **WHISPER**"""

whisper.available_models()

model_medium = whisper.load_model("large-v2")

"""## **DE .FLAC A MP3**"""

list_flac=os.listdir()

for i in list_flac:
    if ".flac" in i[-6:]:
        #print(path+i)
        song = AudioSegment.from_file(i, format="flac")
        song.export(i.replace(".flac", ".mp3"), format="mp3")

"""## **OPEN AI**"""

openai.api_key = "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"

"""### **WHISPER OPEN AI (Nueva propuesta)**

Requiere de la la API de OpenAI a $0.006 por minuto. Trabaja con archivos más pequeños, con mejores resultados y no demanda de costo por GPU
"""

paths=[]
formatos=[".mp3"]
section_size = 25 * 1024 * 1023

for i in os.listdir(): 
  if i[-4:] in formatos:
    tm_ini=time.time()
    song = AudioSegment.from_mp3(i)
    peso = os.path.getsize(i)
    audio_sections = []
    for j in range(0, len(song), section_size):     #Cortar audio en secciones de 25mb
        audio_sections.append(song[j:j+section_size])

    generated_audio = ""                            # Genera audio para cada sección
    cont=0
    for section in audio_sections:
      nomb_aud="section"+str(cont)+".mp3"
      first_10_minutes = section
      first_10_minutes.export(nomb_aud, format="mp3")
      audio = open(nomb_aud, "rb")

      transcript = openai.Audio.transcribe("whisper-1", audio)
      os.remove(nomb_aud)
      generated_audio+=" "+transcript.text
      cont+=1

    tm_espr=time.time()-tm_ini

    audio_texto=open("T "+i[:-4]+".txt", "w")
    comnb=generated_audio.lower().split("cambio")
    comnb = list( map (cle_ini_fin, comnb))
    comnb="\n".join(comnb)
    audio_texto.write(comnb)
    audio_texto.close()

    mens=i+": Audio de "+str(round(peso/(1024*1024),2))+" mb "
    print(mens, end="")
    if tm_espr>60:
      print(round(tm_espr/60,1), "min")
    else:
      print(round(tm_espr,1), "seg")
    print()

"""### **WHISPER LIBRE**

Gratis pero demanda de costo por GPU.
"""

paths=[]
formatos=[".flac"]
for i in os.listdir():
  for j in formatos:
    if j in i: 
      paths.append(i)

contenido=[]
for i in paths:
  peso=os.stat(i).st_size

  tm_ini=time.time()
  result =model_medium.transcribe(i, fp16=False)
  tm_espr=time.time()-tm_ini
  contenido.append(result["text"])

  mens=i+": Audio de "+str(round(peso/(1024*1024),2))+" mb "
  print(mens, end="")
  if tm_espr>60:
    print(round(tm_espr/60,1), "min")
  else:
    print(round(tm_espr,1), "seg")
  print()

  audio_texto=open("T "+i[:-4]+"txt", "w")
  comnb=result["text"].lower().split("cambio")
  comnb = list( map (cle_ini_fin, comnb))
  comnb="\n".join(comnb)
  audio_texto.write(comnb)
  audio_texto.close()

nomb_texts=list(filter(lambda x: ".txt" in x[-4:], os.listdir()))
nomb_texts

nombre=nomb_texts[0]
prompt=open(nombre, "r")
prompt=prompt.readlines()

resultado=""
flag=False
time_tot=time.time()
div=340
fact=20
ind=0
ind_f=0
leng=len(prompt)
max_prom=850

while ind_f!=leng:
  products=""
  cont_tok=0

  for i in prompt[ind:]:
    if (cont_tok+len(prompt[ind_f].split()))>max_prom:
      break
    else:
      cont_tok+=len(prompt[ind_f].split())
      ind_f+=1

  if ind_f>=leng:
    ind_f=leng

  for i in prompt[ind:ind_f]:
    if not(i in products):
      products=products+cle_ini_fin(i)

  prompt_ini="""De la frase:
              marca esquimo inicio jugo esquimo fruit punch 18 23 ml normal 53 50 hasta 21 de febrero fin, 
              marca lala inicio lala yogurt fresa 750 gramos normal 83 
              pepsi de 3 litros normal 12.50
              tortrix, inicio tortrix conchicharron de 150 gr normal 11.50 oferta 10 hasta 21 de febrero\",
              nestun 5845 normal 1710 fin 6991 normal 1710 fin 4862 normal 2900
              \"marca, coca cola, inicio coca cola original de 600 ml normal 585 gr, sin azúcar de 600 ml normal 570 gr coca cola original de 2 litros normal 1240 gr '
              Teniendo en cuenta que algunos precios llevan centavos y que el precio de oferta siempre debe ser menor que el precio normal, 
              puedo obtener en formato CSV 4 carapterísticas:
              MARCA, DESCRIPCIÓN, PRECIO NORMAL, PRECIO OFERTA
              Esquimo, jugo esquimo fruit punch 18 23ml, $53.50, No hay. 
              Lala, yogurt fresa 750 gramos, $83.00, No hay.
              Pepsi, 3 litros, $12.50, No hay.
              Tortrix, con chicharron de 150 gr, $11.50, $10.00.
              Nestun, 5845, $17.10, No hay. 
              Nestun, 6991, $17.10, No hay. 
              Nestun, 4862, $29.00, No hay.
              Coca-cola, original de 600 ml, $5.85, No hay.
              Coca-cola, sin azúcar de 600 ml, $5.70, No hay.
              Coca-cola, original de 2 litros, $12.40, No hay.
              De la frase:"""+products+"\n puedo obtener en formato CSV 4 carapterísticas:\n"
  print(len(prompt_ini.split()))

  while True:
    time_ini=time.time()
    completion=gpt(prompt_ini)
    time_fin=time.time()-time_ini
    if len(completion["text"])>0:
      ind=ind_f
      if time_fin>len(products)/div and ("MARCA" in completion["text"]):
        flag=False
        max_prom=850
        break
      print("rehacer")
    else:
      ind_f=ind
      flag=True
      max_prom=len(products.split())-50
      break

  if time_fin<19:
    time.sleep(20-time_fin)

  if flag:
    continue

  respu=completion["text"]
  resultado=resultado+"\n"+respu[respu.index("OFERTA")+7:]
  print(round(time.time()-time_ini,2), "seg")
  print(completion["usage"])
  print()

busc=["\n ", "  ", " , ", "\n\n"]
reem=[ "\n",  " ",  ", ",   "\n"]

for i in range(len(busc)):
  result_clean=resultado.replace(busc[i], reem[i])

time_fin=time.time()-time_tot
print(f"{int(time_fin//60)}:{round(time_fin%60)}", "minutos")

print(result_clean)

resultado=""
flag=False
time_tot=time.time()
div=340
fact=20
ind=0
ind_f=0
leng=len(prompt)
max_prom=850

while ind_f!=leng:
  products=""
  cont_tok=0

  for i in prompt[ind:]:
    if (cont_tok+len(prompt[ind_f].split()))>max_prom:
      break
    else:
      cont_tok+=len(prompt[ind_f].split())
      ind_f+=1

  if ind_f>=leng:
    ind_f=leng

  for i in prompt[ind:ind_f]:
    if not(i in products):
      products=products+cle_ini_fin(i)

  prompt_ini="""De la frase:
              marca esquimo inicio jugo esquimo fruit punch 18 23 ml normal 53 50 hasta 21 de febrero fin, 
              marca lala inicio lala yogurt fresa 750 gramos normal 83 
              pepsi de 3 litros normal 12.50
              tortrix, inicio tortrix conchicharron de 150 gr normal 11.50 oferta 10 hasta 21 de febrero\",
              nestun 5845 normal 1710 fin 6991 normal 1710 fin 4862 normal 2900
              \"marca, coca cola, inicio coca cola original de 600 ml normal 585 gr, sin azúcar de 600 ml normal 570 gr coca cola original de 2 litros normal 1240 gr '
              Teniendo en cuenta que algunos precios llevan centavos y que el precio de oferta siempre debe ser menor que el precio normal, 
              puedo obtener en formato CSV 4 carapterísticas:
              MARCA, DESCRIPCIÓN, PRECIO NORMAL, PRECIO OFERTA
              Esquimo, jugo esquimo fruit punch 18 23ml, $53.50, No hay. 
              Lala, yogurt fresa 750 gramos, $83.00, No hay.
              Pepsi, 3 litros, $12.50, No hay.
              Tortrix, con chicharron de 150 gr, $11.50, $10.00.
              Nestun, 5845, $17.10, No hay. 
              Nestun, 6991, $17.10, No hay. 
              Nestun, 4862, $29.00, No hay.
              Coca-cola, original de 600 ml, $5.85, No hay.
              Coca-cola, sin azúcar de 600 ml, $5.70, No hay.
              Coca-cola, original de 2 litros, $12.40, No hay.
              De la frase:"""+products+"\n puedo obtener en formato CSV 4 carapterísticas:\n"
  print(len(prompt_ini.split()))

  while True:
    time_ini=time.time()
    completion=davinci(prompt_ini)
    time_fin=time.time()-time_ini
    if len(completion["text"])>0:
      ind=ind_f
      if time_fin>len(products)/div and ("MARCA" in completion["text"]):
        flag=False
        max_prom=850
        break
      print("rehacer")
    else:
      ind_f=ind
      flag=True
      max_prom=len(products.split())-50
      break

  if time_fin<19 and completion["usage"]!="rate limit":
    time.sleep(20-time_fin)

  if flag:
    continue

  respu=completion["text"]
  resultado=resultado+"\n"+respu[respu.index("OFERTA")+7:]
  print(round(time.time()-time_ini,2), "seg")
  print(completion["usage"])
  print()

busc=["\n ", "  ", " , ", "\n\n"]
reem=[ "\n",  " ",  ", ",   "\n"]

for i in range(len(busc)):
  result_clean_dav=resultado.replace(busc[i], reem[i])

time_fin=time.time()-time_tot
print(f"{int(time_fin//60)}:{round(time_fin%60)}", "minutos")

print(result_clean_dav)

l_resultado=result_clean.split("\n")
columnas=[]
for i in l_resultado[1:]:
  prod=i.split(", ")
  if len(prod)>4:
    list_bad_prod=i.split(", ")
    list_goo_prod=[]
    for j in list_bad_prod[:-1]:
      if not(j in list_goo_prod) and len(list_goo_prod)<3:
        list_goo_prod.append(j)

    list_goo_prod.append(list_bad_prod[-1])
    for i in range(8):
      list_goo_prod.append("")
    columnas.append(list_goo_prod)
  elif len(prod)==4:
    for i in range(8):
      prod.append("")
    columnas.append(prod)

df = pd.DataFrame(columnas, columns=[""]*12)

df

upc_walm=pd.read_excel("UPC WALMART.xlsx")
marc_walm=set(upc_walm["MARCA"])
marc_walm=[str(i).strip() for i in marc_walm]

set_pais=set()
set_cod=set(upc_walm["PAIS"])
for i in set_cod:
  i=i[:2]
  set_pais.add(i)

print(set_pais)

upc={}
for i,j in zip(upc_walm["CLAVE"],upc_walm["Descripción"]):
  upc[str(j).lower()]=i

marc_desc_pais={}
marc_upc_pais={}
for h in set_pais:
  marc_desc={}
  desc_upc={}
  for i,j,k,l in zip(upc_walm["MARCA"], upc_walm["Descripción"], upc_walm["PAIS"], upc_walm["CLAVE"]):
    if k[:2]==h:
      if str(i).strip() in marc_desc:
        marc_desc[str(i).strip()].append(str(j).strip())
      else:
        marc_desc[str(i).strip()]=[str(j).strip()]

      if str(j).strip().lower() in desc_upc:
        desc_upc[str(j).strip().lower()].append(str(l).strip())
      else:
        desc_upc[str(j).strip().lower()]=[str(l).strip()]

  marc_upc_pais[h]=desc_upc
  marc_desc_pais[h]=marc_desc

lista_productos=columnas

conectores_gram=["en", "de", "del", "con", "y"]

marc_desc=marc_desc_pais["CR"]
marc_pais=marc_upc_pais["CR"]
clave=list(upc_walm["CLAVE"])

list_upcs=[]
for i in marc_pais.values():
  for j in i:
    list_upcs.append(j)

list_upcs=set(list_upcs)
dicc_coinc={"ray": "RAID", "yumi": "YUMMIES", "johnson": "JOHNSON JOHNSON", "accion": "AXION", "acción": "AXION", 
            "doff": "DOVE", "Ponx": "POND'S", "Ni Vea": "NIVEA", "Mister Musculo": "MR MUSCULO", "Fortress":"FORT 3",
            "Heran Childers": "HEAD&SHOULDERS", "Mor": "MORE", "Violán":"BIOLAND", "Scott Brae":"SCOTCH BRITE", "Brazo":"BRASSO"}

cont_coin_marc=0
cont_coin_desc=0
for j in range(len(lista_productos)):

  if len(lista_productos[j][1])<6:
    det=False
    upc_des=lista_productos[j][1].replace(".", "")
    for i in list_upcs:
      if i.endswith(upc_des):
        lista_productos[j][6]=i
        ind=clave.index(i)
        lista_productos[j][4]=upc_walm["MARCA"][ind]
        lista_productos[j][5]=upc_walm["Descripción"][ind]
        cont_coin_desc+=1
        det=True
        break

    if det:
      continue
      
  if lista_productos[j][0] in dicc_coinc:
    cont_coin_marc+=1
    lista_productos[j][4]=dicc_coinc[lista_productos[j][0]]
    result, coinc=mejor_coincidencia_descrip(lista_productos[j][4], lista_productos[j][1], marc_desc[lista_productos[j][4]])
    if coinc:
      cont_coin_desc+=1
      lista_productos[j][5]=result
      palabras = lista_productos[j][1].split(" ")
      palabras = [i for i in palabras if not(i in conectores_gram)]

      #if len(palabras):
      #  print(len(palabras))
      lista_productos[j][6]=marc_pais[result.lower()][0]
      #print(lista_productos[j])
      lista_productos[j][7:min(7+len(palabras),12)]=palabras[:min(len(palabras),5)]
      #print(lista_productos[j])
      #print()

    continue
  result, coinc=mejor_coincidencia(lista_productos[j][0], marc_desc.keys())
  if coinc:
    cont_coin_marc+=1
    lista_productos[j][4]=result
    dicc_coinc[lista_productos[j][0]]=result
    result, coinc=mejor_coincidencia_descrip(result, lista_productos[j][1], marc_desc[result])
    if coinc:
      cont_coin_desc+=1
      lista_productos[j][5]=result
      palabras = lista_productos[j][1].split(" ")
      palabras = [i for i in palabras if not(i in conectores_gram)]
      #print(palabras)
      #if len(palabras):
      #  print(len(palabras))
      lista_productos[j][6]=marc_pais[result.lower()][0].lower()
      lista_productos[j][7:min(7+len(palabras),12)]=palabras[:min(len(palabras),5)]

print(round(100*cont_coin_marc/len(lista_productos),2))
print(round(100*cont_coin_desc/len(lista_productos),2))

lista_final=np.transpose(lista_productos)

midataframe=pd.DataFrame()
list_cabe=["MARCA_AUDIO", 
           "DESCRIPCIÓN_AUDIO", 
           "PRECIO",
           "OFERTA",
           "MARCA_WALMART",
           "DESCRIPCIÓN_WALMART",
           "UPC"]

for i in range(1,6):
  list_cabe.append("PALABRA "+str(i))

for i in range(12):
  midataframe[list_cabe[i]]=lista_final[i]

midataframe.to_excel(nombre[:-5]+".xlsx")

midataframe

head_fin=["MARCA TRANSCRIPCIÓN", "ULTIMOS 4UPC", "PALABRA 1", "PALABRA 2", "PALABRA 3", "PALABRA 4", "PALABRA 5", 
          "PRECIO NORMAL EMPAQUE", "PRECIO OFERTA EMPAQUE", "INICIO OFERTA", "FINAL OFERTA", "COMPRA"]

marc_desc=[]
for i,j in zip(midataframe["MARCA_WALMART"], midataframe["DESCRIPCIÓN_WALMART"]):
  marc_desc.append(i+": "+j)

excel_final = pd.DataFrame(columns=head_fin)
excel_final["MARCA TRANSCRIPCIÓN"]=marc_desc
excel_final["ULTIMOS 4UPC"]=midataframe["UPC"]
for i in range(1,5):
  excel_final["PALABRA "+str(i)]=midataframe["PALABRA "+str(i)]
excel_final["PRECIO NORMAL EMPAQUE"]=midataframe["PRECIO"]
excel_final["PRECIO OFERTA EMPAQUE"]=midataframe["OFERTA"]

excel_final

excel_final.to_excel("FINAL"+nombre[:-5]+".xlsx", index=False)